<% if (ssl && (sslRedirectHttpToHttps || sslLetsEncrypt)) { %>

# http to https

server {
	server_name <%= serverName %>;

	listen <%= sslHttpPort %>;

<% if (sslLetsEncrypt) { %>
	location ^~ /.well-known/acme-challenge/ {
		alias <%= sslLetsEncrypt %>;
		default_type text/plain;
		access_log off;
		log_not_found off;
		try_files $uri =404;
	}

<% } %>
<% if (sslRedirectHttpToHttps) { %>

	location <%= path %>/ {
		return 301 https://$host<% if ((sslHttpPort !== 80) || (port !== 443)) { %>:<%= port %><% } %>$request_uri;
	}
<% } %>
}


<% } %>
server {
	server_name <%= serverName %>;
<% if (ssl) { %>

	############################################
	# ssl

	listen <%= port %> ssl http2;

	ssl_certificate     <%= sslCertificate %>;
	ssl_certificate_key <%= sslCertificateKey %>;

	ssl_session_timeout 1d;
	ssl_session_cache shared:SSL:10m;
	ssl_session_tickets off;

	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
	ssl_prefer_server_ciphers off;

	add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

	ssl_stapling on;
	ssl_stapling_verify on;
<% } else { %>
	listen <%= port %>;
<% } %>
<% if (httpAuth !== false) { %>

	############################################
	# http auth

	auth_basic           "<%= title %> login";
	auth_basic_user_file <%= httpAuth %>;
<% } %>

	############################################
	# basic

	charset utf-8;

	location /favicon.ico {
		log_not_found off;
	}

	location /robots.txt {
		log_not_found off;
	}

	############################################
	# remove trailing dot from host

	if ($http_host ~ \.$) {
		return 301 $scheme://$host$request_uri;
	}

	############################################
	# gzip

	gzip on;
	gzip_vary on;
	gzip_min_length 1024;
	gzip_comp_level 5;
	gzip_proxied expired no-cache no-store private auth;
	gzip_types text/html text/plain text/css text/javascript application/javascript application/x-javascript;

	############################################
	# gallery

	location <%= path %>/ {
		alias <%= galleryDir %>/;

		autoindex on;
		autoindex_format xml;
		xslt_string_param uri $request_uri;
		xslt_stylesheet <%= nginxAppDir %>/static-nginx-gallery.xslt;
		try_files $uri $uri/ =404;
	}

	############################################
	# CSS and JS files

	location = <%= path %>/@<%= cssSha1 %>.css {
		expires 365d;
		default_type text/css;
		alias <%= nginxAppDir %>/static-nginx-gallery.css;
	}

	location = <%= path %>/@<%= jsSha1 %>.js {
		expires 365d;
		default_type 'text/javascript';
		alias <%= nginxAppDir %>/static-nginx-gallery.js;
	}
<% if (typeof favicon === 'string') { %>

	############################################
	# custom favicon

	location = <%= path %>/favicon.png {
		alias <%= favicon %>;
	}

<% } %>
<% if (typeof thumbnails === 'string') { %>

	############################################
	# thumbnails with cache

	location <%= path %>/cache/thumbnails {
		alias <%= nginxAppDir %>/cache/thumbnails;

		expires 1d;
		add_header Pragma public;
		add_header Cache-Control 'public';

		try_files $uri @imageProxy;
	}

	location @imageProxy {
		internal;

		if (!-f <%= galleryDir %>/${image_original_uri}) {
			return 404;
		}

		proxy_pass         http://127.0.0.1:8080/image_resize/${image_original_uri}?w=<%= imageFilterResizeWidth %>&h=<%= imageFilterResizeHeight %>;
		proxy_store        <%= nginxAppDir %>/cache/thumbnails/${image_original_uri};
		proxy_store_access user:rw  group:rw  all:rw;
		proxy_temp_path    <%= nginxAppDir %>/temp;
		proxy_set_header   Host $host;
	}

<% } else if (thumbnails) { %>

	############################################
	# thumbnails

	location <%= path %>/thumbnails {
		alias <%= galleryDir %>;

		expires 1d;
		add_header Pragma public;
		add_header Cache-Control 'public';

		image_filter resize <%= imageFilterResizeWidth %> <%= imageFilterResizeHeight %>;
		image_filter_buffer <%= imageFilterBuffer %>;
		image_filter_jpeg_quality <%= image_filter_jpeg_quality %>;
		image_filter_webp_quality <%= image_filter_webp_quality %>;
		image_filter_transparency on;
		image_filter_sharpen <%= image_filter_sharpen %>;
	}
<% } %>
<% if (subtitlesConvertSrtToVtt) { %>

	############################################
	# convert SRT subtitles to VTT

	location ~* ^<%= path %>/.+\.vtt$ {
		alias <%= galleryDir %>;
		try_files $uri<% if (path !== '') { %> ${subtitles_base_uri}.vtt<% } %> @convertSubtitles;
	}

	location @convertSubtitles {
		internal;

		# if source srt subtitles doesn't exists...
		if (!-f <%= galleryDir %>/${subtitles_base_uri}.srt) {
			return 404;
		}

		add_header Access-Control-Allow-Origin  <%= serverName %>;
		add_header Access-Control-Allow-Methods GET;

		content_by_lua_block {
			-- load original srt subtitles
			local subtitlesFile = assert(io.open('<%= galleryDir %>' .. ngx.var.subtitles_base_uri .. '.srt', 'rb'))
			if not subtitlesFile then
				-- here we're returning HTTP 400, this should never happen, so we want to know about this anomaly :-)
				return ngx.exit(ngx.HTTP_BAD_REQUEST)
			end
			local content = subtitlesFile:read('*all')
			subtitlesFile:close()

			-- check for UTF-8 BOM header and remove it
			if (content:byte(1) == 239) and (content:byte(2) == 187) and (content:byte(3) == 191) then
				content = content:sub(4)
			end

			-- add VTT header and simply replace ',' with '.' in time ranges
			ngx.say('WEBVTT\n\n' .. content:gsub(':([%d]+),([%d]+)', ':%1.%2'));
		}
	}
<% } %>
}
<% if (typeof thumbnails === 'string') { %>

server {
	listen 127.0.0.1:8080;

	location /image_resize {
		alias <%= galleryDir %>;

		image_filter resize $arg_w $arg_h;
		image_filter_buffer <%= imageFilterBuffer %>;
		image_filter_jpeg_quality <%= image_filter_jpeg_quality %>;
		image_filter_webp_quality <%= image_filter_webp_quality %>;
		image_filter_transparency on;
		image_filter_sharpen <%= image_filter_sharpen %>;
	}
}

map $uri $image_original_uri {
	~^<%= path %>/cache/thumbnails/(?<image_uri>.+)$ $image_uri;
}
<% } %>
<% if (subtitlesConvertSrtToVtt) { %>

map $uri $subtitles_base_uri {
	~^<%= path %>(?<base_uri>/.+)\.vtt$ $base_uri;
}
<% } %>
